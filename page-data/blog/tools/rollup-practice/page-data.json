{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/tools/rollup-practice","result":{"data":{"markdownRemark":{"html":"<p>When I write JavaScripts in different projects, there is always a situation that many modules have same requirement to call same function, or need excute same process. Thus seal those common functions and then publish them as a package will save me a lot of time.</p>\n<p>In order to achieve the goal, I need a tool to handle bundling task, transpile into ES6 module or commonjs module, then it is the time to let Rollup.js help.</p>\n<p>Rollup is a very convenient tool to compile small pieces of code into larger module. It uses standardized format for code modules, and can be easily configed to make code into ES6 Modules, CommonJS, or IIEF. Also, compared with Webpack, Rollup configure can be easier, and simpler, thus I believe it very good at library development.</p>\n<p>Similar to Webpack, Rollup needs an entry to start with. So it is better to organize project directory structure at first. In my case, I organized them like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">my-module\n  |-lib  #bundle destination\n  |-src #source code directory\n    |-index.js #entry\n  |-rollup.config.js #rollup config file\n  |-package.json</code></pre></div>\n<p>The <code class=\"language-text\">src/index.js</code> is the entry where we can put all functions into. For example, I need a function that I can check a telephone number whether it is in a valid format in several area. Then I wrote is:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/index.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PHONE_REGX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"en-US\"</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^((\\+1|1)?( |-)?)?(\\([2-9][0-9]{2}\\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"en-CA\"</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^((\\+1|1)?( |-)?)?(\\([2-9][0-9]{2}\\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"en-HK\"</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(\\+?852[-\\s]?)?[456789]\\d{3}[-\\s]?\\d{4}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"zh-CN\"</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^((\\+|00)86)?1([358][0-9]|4[579]|6[67]|7[01235678]|9[189])[0-9]{8}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"zh-TW\"</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(\\+?886\\-?|0)?9\\d{8}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isValidPhone</span><span class=\"token punctuation\">(</span>tel<span class=\"token punctuation\">,</span> locale <span class=\"token operator\">=</span> <span class=\"token string\">\"en-CA\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> phone <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tel<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>phone <span class=\"token operator\">||</span> phone<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>locale <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token constant\">PHONE_REGX</span><span class=\"token punctuation\">[</span>locale<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">PHONE_REGX</span><span class=\"token punctuation\">[</span>locale<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now I have the ingredient, and it is the time to set up <code class=\"language-text\">rollup.config.js</code> to help me cook the package course. Before the configuration, we need to install dependencies. So:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev rollup</code></pre></div>\n<p>After installed rollup, we can write the configuration base in the <code class=\"language-text\">rollup.config.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    input<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/index.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        file<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lib/bundle.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        format<span class=\"token operator\">:</span> <span class=\"token string\">\"esm\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Above is the starter of rollup configuration. Basically, rollup need us to declare what is the input entry file and where to output the transpiled file. <code class=\"language-text\">output.formt</code> is the output module format which can be <code class=\"language-text\">cjs</code> for <code class=\"language-text\">commonjs</code>, <code class=\"language-text\">esm</code> for <code class=\"language-text\">ESmodule</code>, or <code class=\"language-text\">iife</code> for browser self-executing function.</p>\n<p>Technically, this rollup is ready to use with the minimum configuration. However, we still need tools like babel to transpile source JavaScripts code to make the module compatible with most of the browser environment. So, this is where plugins come out to help.</p>\n<p>install babel dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i --save-dev @babel/core @babel/preset-env @babel/plugin-transform-runtime</code></pre></div>\n<p>install babel plugin for rollup.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i --save-dev @rollup/plugin-babel</code></pre></div>\n<p>Then we need to update <code class=\"language-text\">rollup.config.js</code>, set <code class=\"language-text\">@rollup/plugin-babel</code> in configuration object:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> babel <span class=\"token keyword\">from</span> <span class=\"token string\">'@rollup/plugin-babel'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">EXTENSIONS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    input<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/index.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        file<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"lib/bundle.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        format<span class=\"token operator\">:</span> <span class=\"token string\">\"esm\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">babel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      babelHelpers<span class=\"token operator\">:</span> <span class=\"token string\">'runtime'</span><span class=\"token punctuation\">,</span>\n      extensions<span class=\"token operator\">:</span> <span class=\"token constant\">EXTENSIONS</span><span class=\"token punctuation\">,</span>\n      include<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src/**'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'node_modules/**'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now it's the time to set up <code class=\"language-text\">.babelrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"useBuiltIns\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"usage\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"corejs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"proposals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-transform-runtime\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>for more babel setup instruction <a href=\"https://babeljs.io/setup#installation\">see here</a></p>\n<p>Now the configuration is ready, then we need to add npm script in <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">...\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ...\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rollup --config rollup.config.js\"</span><span class=\"token punctuation\">,</span>\n    ...\n<span class=\"token punctuation\">}</span>\n...</code></pre></div>\n<p>afer these we can run:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run build</code></pre></div>\n<p>then we can see <code class=\"language-text\">lib/bundle.js</code> generated by rollup</p>\n<p>and this bunle.js can be import by other JavaScript module. In this example,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//main.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isValidPhone <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"path/to/bundle.js\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValidPhone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4168886666\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the futrue article, I am going to talk about the practice for publishing package in the npm.</p>","frontmatter":{"date":"March 12, 2020","slug":"/blog/tools/rollup-practice","title":"Rollup for Library Bundle in practice","topic":"Tools"}}},"pageContext":{"slug":"/blog/tools/rollup-practice"}},"staticQueryHashes":[]}